{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/shared/shared.module.ts","./src/app/info/info.component.ts","./src/app/info/info.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { InfoComponent } from './info/info.component';\n\nconst routes: Routes = [\n  //cuando ponga la ruta login lo lleva a logincomponent\n  {path: '', redirectTo: 'login', pathMatch:'full'},\n  {path: 'login', component: LoginComponent},\n  {path: 'info', component: InfoComponent},\n  {path:'dashboard',loadChildren:()=>import('./components/dashboard/dashboard.module').then(x =>x.DashboardModule)},\n  {path: '**', redirectTo: 'login', pathMatch:'full'}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'material';\n}\n","<router-outlet></router-outlet>\n\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n//material\nimport { MatSliderModule } from '@angular/material/slider';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\n//componentes\nimport { LoginComponent } from './components/login/login.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from './components/shared/shared.module';\nimport { InfoComponent } from './info/info.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    InfoComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatSliderModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    ReactiveFormsModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    SharedModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: FormGroup;\n  loading = false;\n\n    //FormBuilder para formulario y MatSnackBar para mensaje de error son importados\n  constructor(private fb: FormBuilder, private _snackBar: MatSnackBar, private router: Router) {\n    //se crea el las variables del formulario\n    this.form = this.fb.group({\n      usuario: [ '',Validators.required ],\n      password: [ '',Validators.required ]\n    })\n   }\n\n  ngOnInit(): void {\n  }\n\n  ingresar(){\n    \n    //atrapamos los valores del formulario\n    const usuario = this.form.value.usuario;\n    const password = this.form.value.password;\n\n    if(usuario != '' && password != ''){\n      //llamada funcion cargando redirecciono\n      this.cargando();\n    }else{\n      //llamada metodo mensaje error\n      this.error();\n      //reseteo el formulario\n      this.form.reset();\n    }\n\n  }\n\n  //muestra mensaje cuando escriben mal la clave\n  error(){\n    this._snackBar.open('Usuario o Password invalidos','',{\n      duration: 5000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom'\n    })\n  }\n\n  cargando(){\n    this.loading = true;\n    setTimeout(()=>{\n      //aqui se redirecciona al dashboard\n      this.router.navigate(['dashboard'])\n    },1500);\n  }\n\n}\n","<div class=\"body\">\n    <div class=\"login\">\n        <!-- *ngIf=\"loading\" se va a mostrar el elemento solo cuando la variable ( en login.ts) loading sea true-->\n        <mat-spinner *ngIf=\"loading\" diameter=\"50\" class=\"sppiner\"></mat-spinner>\n        <!-- Se utiliza formGroup para formularios y cuando se hace submit se llama a funcion ingresar-->\n        <form *ngIf=\"!loading\" [formGroup]=\"form\" (ngSubmit)=\"ingresar()\">\n            <img src=\"../assets/img/usuarios.png\">\n        <h1>proyecto 3</h1>\n        <mat-form-field class=\"ancho\" appearance=\"fill\">\n            <mat-label>Usuario</mat-label>\n            <input type=\"text\" matInput autocomplete=\"off\" formControlName=\"usuario\">\n          </mat-form-field>\n          <mat-form-field class=\"ancho\" appearance=\"fill\">\n            <mat-label>Contraseña</mat-label>\n            <input type=\"password\" matInput autocomplete=\"off\" formControlName=\"password\">\n          </mat-form-field>\n          <br/>\n          <!--[disabled]=\"form.invalid\" el boton esta disabled mientras el formulario no este lleno-->\n          <button type=\"submit\" mat-raised-button class=\"ancho button\" color=\"primary\" [disabled]=\"form.invalid\">ingreso</button>\n    \n        </form>\n        </div>\n    \n</div>\n  \n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n//material\nimport { MatSliderModule } from '@angular/material/slider';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatIconModule} from '@angular/material/icon';\nimport { HttpClientModule } from '@angular/common/http';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatSliderModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatIconModule,\n    HttpClientModule,\n    MatTableModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSelectModule,\n    MatDividerModule\n  ],\n  exports: [\n    CommonModule,\n    MatSliderModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatIconModule,\n    HttpClientModule,\n    MatTableModule,\n    MatTooltipModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatCardModule,\n    MatGridListModule,\n    MatSelectModule,\n    MatDividerModule\n  ]\n})\nexport class SharedModule { }\n","import { Component, OnInit } from '@angular/core';\n\n\n\n@Component({\n  selector: 'app-info',\n  templateUrl: './info.component.html',\n  styleUrls: ['./info.component.css']\n})\nexport class InfoComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n    \n    <div class=\"cabecera\">\n        <mat-toolbar class=\"barra\">\n            <span>API REST INFORMACION</span>\n            <button routerLink=\"/dashboard\" mat-flat-button color=\"Volver\">Atrás</button>\n          </mat-toolbar>\n    </div>\n    <div class=\"cuerpo\">\n        \n        <mat-card>\n            <mat-card-title>\n                Información\n            </mat-card-title>\n            <mat-card-subtitle>\n                <p>Esta es una API solo de consumo : solo el método HTTP GET, está disponible en los recursos.\n                    No se requiere autenticación para acceder a esta API, y todos los recursos están completamente \n                    abiertos y disponibles. </p>\n            </mat-card-subtitle>\n            <mat-card-content>\n                <div class=\"container-fluid\">\n                    <h3>Mysql (endpoint)</h3>\n                    <p><strong>Parametros</strong> ninguno  , <strong>Tipo</strong> : Get    , <strong>Retorno</strong>: Json </p>\n                    <p>Servidor Heroku</p>\n                    <p>GET: https://proyecto3express.herokuapp.com/modelo </p>\n                    <p>GET: https://proyecto3express.herokuapp.com/marca </p>\n                </div>\n                <div class=\"container-fluid\">\n                    <h3>Firebase (endpoint)</h3>\n                    <p><strong>Parametros</strong> Numero  , <strong>Tipo</strong> : Get    , <strong>Retorno</strong>: Json </p>\n                    <p>GET: https://proyecto3bdnorelacional-default-rtdb.firebaseio.com/info_modelos.json</p>\n                </div>\n                \n            </mat-card-content>\n            <mat-card-footer>\n                Autor: Miguel Mise - 2022 - DAWM\n            </mat-card-footer>\n        </mat-card>\n    </div>\n    \n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}